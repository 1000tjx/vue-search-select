<template>
  <div class="s-select-cont">
    <input
      :disabled="disabled"
      autocomplete="off"
      class="select-input"
      :placeholder="getPlaceHolder"
      @focus="focus"
      @blur="unFocus"
      v-model="query"
      @input="updateQuery"
    />
    <br />
    <div v-if="showOptions" class="options-cont">
      <div class="ss-no-result-class" v-if="filterOptions.length === 0">
        <p>
          <br />
          {{ noResultsMsg ? noResultsMsg : "No Results." }}
        </p>
      </div>
      <div
        class="item"
        v-for="(option, key) in filterOptions"
        :key="key"
        @click="() => selectOption(option)"
      >
        {{ option[label] }}
      </div>
    </div>
  </div>
</template>

<script>
export default {
  props: ["placeholder", "options", "label", "noResultsMsg", "disabled"],
  emits: ["onSelect"],
  data() {
    return {
      showOptions: false,
      query: "",
      oldOption: {},
    };
  },
  methods: {
    reset() {
      this.query = "";
      this.oldOption = {};
    },
    updateQuery(e) {
      this.query = e.target.value;
    },
    selectOption(option) {
      this.oldOption = option;
      this.query = option[this.label];
      this.showOptions = false;
      this.$emit("onSelect", option);
    },
    focus() {
      this.showOptions = true;
      this.query = "";
    },
    unFocus() {
      setTimeout(() => {
        this.showOptions = false;
        this.query = this.oldOption[this.label];
      }, 150);
    },
  },
  computed: {
    filterOptions() {
      return [...this.options].filter(
        (option) =>
          option[this.label]
            ?.toString()
            ?.trim()
            ?.toLowerCase()
            ?.includes(this.query.trim().toLowerCase()) || !this.query.trim()
      );
    },
    getPlaceHolder() {
      if (this.label in this.oldOption) return this.oldOption[this.label];
      return this.placeholder;
    },
  },
};
</script>

<style scoped>
.ss-no-result-class {
  padding: 2px 10px;
}
.select-input {
  width: 100%;
  border: 0px !important;
  outline: none !important;
  text-align: inherit;
}

.select-input:focus {
  outline: none;
}
.s-select-cont {
  position: relative;
}
.options-cont {
  position: absolute;
  left: 0;
  right: 0;
  max-width: 100%;
  background-color: white;
  border: 1px solid rgb(209, 209, 209);
  border-top: 0px;
  max-height: 150px;
  overflow: hidden;
  overflow-y: scroll;
  z-index: 9999;
  font-size: 0.9em;
}
.item {
  border-bottom: 1px solid rgb(204, 204, 204);
  /* white-space: nowrap !important; */
  /* overflow: hidden !important; */
  cursor: pointer;
  padding: 3px 10px;
  max-width: 98%;
  overflow-wrap: break-word;
}
.item:hover {
  background-color: var(--blue);
  color: white;
}

::-webkit-scrollbar {
  width: 6px !important;
}
/* Track */
::-webkit-scrollbar-track {
  /* box-shadow: inset 0 0 5px black !important; */
  border-radius: 10px;
  background-color: transparent !important;
}

/* Handle */
::-webkit-scrollbar-thumb {
  background: rgb(155, 155, 155) !important;
  border-radius: 0px;
}

/* Handle on hover */
::-webkit-scrollbar-thumb:hover {
  background: dimgray !important;
}
</style>
